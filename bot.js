const TelegramBot = require('node-telegram-bot-api');
const cron = require('node-cron');
const fs = require('fs');

class MultiChatNotificationBot {
    constructor(token) {
        this.bot = new TelegramBot(token, { polling: true });
        this.clients = new Map();
        this.scheduledTasks = new Map();
        this.dataFile = 'clients_data.json';
        
        this.loadClientsData();
        this.setupCommands();
        this.restoreScheduledTasks();
    }

    setupCommands() {
        // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞ —Å –∫–ª–∏–µ–Ω—Ç–æ–º
        this.bot.onText(/\/setup (.+) (\d+)/, (msg, match) => {
            const chatId = msg.chat.id;
            const clientName = match[1];
            const practiceCount = parseInt(match[2]);
            
            if (msg.chat.type === 'private') {
                this.bot.sendMessage(chatId, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¥–ª—è –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –º–µ–Ω—è –≤ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–∞–∫—Ç–∏–∫–∞–º–∏ ‚ú®');
                return;
            }
            
            this.setupClientChat(clientName, practiceCount, chatId);
        });

        // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ
        this.bot.onText(/\/info/, (msg) => {
            const chatId = msg.chat.id;
            this.showChatInfo(chatId);
        });

        // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        this.bot.onText(/\/stop/, (msg) => {
            const chatId = msg.chat.id;
            this.stopChatNotifications(chatId);
        });

        // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –≥—Ä—É–ø–ø—É
        this.bot.on('new_chat_members', (msg) => {
            const newMembers = msg.new_chat_members;
            const botAdded = newMembers.some(member => member.is_bot);
            
            if (botAdded) {
                const welcomeMessage = `–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤–∞—Å, –≤–æ–ª—à–µ–±–Ω—ã–π –º–∞—Å—Ç–µ—Ä! –ú–µ–Ω—è –∑–æ–≤—É—Ç –ö–ª–∞—Ä–∞, —è –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –≤–∞–º –æ —Å—Ä–æ–∫–∞—Ö, —á—Ç–æ–±—ã —É –Ω–∞—Å –≤—Å—ë –ø—Ä–æ–∏–∑–æ—à–ª–æ –≤ –Ω—É–∂–Ω–æ–µ –≤—Ä–µ–º—è –∏ –≤ –Ω–∞—à–µ–π —Å –≤–∞–º–∏ –ø—Ä–∞–∫—Ç–∏–∫–µ –≤—ã –≤—ã—à–ª–∏ –≤–æ–≤—Ä–µ–º—è.

–ü–æ—á–µ–º—É —ç—Ç–æ —Ç–∞–∫ –≤–∞–∂–Ω–æ? –ü–æ—Ç–æ–º—É —á—Ç–æ –∫–æ–≥–¥–∞ –∞–±–æ–Ω–µ–º–µ–Ω—Ç –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è, —á–∞—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞—Ä—Ö–∏–≤–∏—Ä—É–µ—Ç—Å—è –∏ –º—ã –∏–¥—ë–º –ø—Ä–∞–∑–¥–Ω–æ–≤–∞—Ç—å –≤—ã–ø—É—Å–∫–Ω–æ–π —Å —Ç–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø—Ä–∞–∫—Ç–∏–∫, –∫–æ—Ç–æ—Ä—ã–µ —É—Å–ø–µ–ª–∏ —Å–¥–µ–ª–∞—Ç—å!

–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:
/setup –ò–º—è_—É—á–∞—Å—Ç–Ω–∏–∫–∞ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ_–ø—Ä–∞–∫—Ç–∏–∫

–ù–∞–ø—Ä–∏–º–µ—Ä: /setup –ê–Ω–Ω–∞ 4

–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/info - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–∏—Ö –ø—Ä–∞–∫—Ç–∏–∫–∞—Ö
/stop - –∑–∞–≤–µ—Ä—à–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è

–ë—É–¥—É —Ä–∞–¥–∞ –ø–æ–º–æ—á—å –≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –≤–∞—à–µ–≥–æ –≤–æ–ª—à–µ–±–Ω–æ–≥–æ –ø—É—Ç–∏ üåü`;

                this.bot.sendMessage(msg.chat.id, welcomeMessage);
            }
        });
    }

    setupClientChat(clientName, practiceCount, chatId) {
        const startDate = new Date();
        const endDate = new Date(startDate);
        endDate.setDate(startDate.getDate() + (practiceCount * 12));

        const client = {
            name: clientName,
            practiceCount: practiceCount,
            startDate: startDate,
            endDate: endDate,
            chatId: chatId
        };

        this.clients.set(chatId, client);
        this.saveClientsData();
        this.scheduleNotifications(client);
        
        const welcomeMessage = `–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤–∞—Å, –≤–æ–ª—à–µ–±–Ω—ã–π –º–∞—Å—Ç–µ—Ä! –ú–µ–Ω—è –∑–æ–≤—É—Ç –ö–ª–∞—Ä–∞, —è –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –≤–∞–º –æ —Å—Ä–æ–∫–∞—Ö, —á—Ç–æ–±—ã —É –Ω–∞—Å –≤—Å—ë –ø—Ä–æ–∏–∑–æ—à–ª–æ –≤ –Ω—É–∂–Ω–æ–µ –≤—Ä–µ–º—è –∏ –≤ –Ω–∞—à–µ–π —Å –≤–∞–º–∏ –ø—Ä–∞–∫—Ç–∏–∫–µ –≤—ã –≤—ã—à–ª–∏ –≤–æ–≤—Ä–µ–º—è.

–ü–æ—á–µ–º—É —ç—Ç–æ —Ç–∞–∫ –≤–∞–∂–Ω–æ? –ü–æ—Ç–æ–º—É —á—Ç–æ –∫–æ–≥–¥–∞ –∞–±–æ–Ω–µ–º–µ–Ω—Ç –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è, —á–∞—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞—Ä—Ö–∏–≤–∏—Ä—É–µ—Ç—Å—è –∏ –º—ã –∏–¥—ë–º –ø—Ä–∞–∑–¥–Ω–æ–≤–∞—Ç—å –≤—ã–ø—É—Å–∫–Ω–æ–π —Å —Ç–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø—Ä–∞–∫—Ç–∏–∫, –∫–æ—Ç–æ—Ä—ã–µ —É—Å–ø–µ–ª–∏ —Å–¥–µ–ª–∞—Ç—å!

–ò—Ç–∞–∫, –≤–æ—Ç —á—Ç–æ —É –Ω–∞—Å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ:

–£—á–∞—Å—Ç–Ω–∏–∫: ${clientName}
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∞–∫—Ç–∏–∫: ${practiceCount}
–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –ø—É—Ç–∏: ${this.formatDate(startDate)}
${practiceCount === 1 ? '–§–∏–Ω–∞–ª—å–Ω—ã–π –¥–µ–¥–ª–∞–π–Ω' : '–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–∞–∫—Ç–∏–∫–∏'}: ${this.formatDate(endDate)}

${practiceCount === 1 ? '–≠—Ç–æ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ - –µ—ë –¥–µ–¥–ª–∞–π–Ω —è–≤–ª—è–µ—Ç—Å—è —Ñ–∏–Ω–∞–ª—å–Ω—ã–º —Å—Ä–æ–∫–æ–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏.' : '–ë—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å –¥—Ä—É–∂–µ—Å–∫–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ 3 –¥–Ω—è –¥–æ –∫–∞–∂–¥–æ–≥–æ –æ—Ä–∏–µ–Ω—Ç–∏—Ä–∞. –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–∞–∫—Ç–∏–∫–∞ - —ç—Ç–æ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –≤–∞–∂–Ω—ã–π –¥–µ–¥–ª–∞–π–Ω!'}

–ñ–µ–ª–∞—é –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–µ–≥–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è üé≠`;

        this.bot.sendMessage(chatId, welcomeMessage);
    }

    scheduleNotifications(client) {
        this.stopChatTasks(client.chatId);
        
        const notifications = this.generateNotifications(client);
        const clientTasks = [];

        notifications.forEach(notification => {
            const task = cron.schedule(this.dateToCron(notification.date), () => {
                this.bot.sendMessage(client.chatId, notification.message);
            }, {
                scheduled: false
            });
            
            clientTasks.push(task);
            task.start();
        });

        this.scheduledTasks.set(client.chatId, clientTasks);
    }

    generateNotifications(client) {
        const notifications = [];
        const { name, practiceCount, startDate, endDate } = client;

        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞ 3 –¥–Ω—è –¥–æ –∫–∞–∂–¥–æ–π –ø—Ä–∞–∫—Ç–∏–∫–∏
        for (let i = 1; i <= practiceCount; i++) {
            const practiceDeadline = new Date(startDate);
            practiceDeadline.setDate(startDate.getDate() + (i * 12));
            
            const threeDaysBefore = new Date(practiceDeadline);
            threeDaysBefore.setDate(practiceDeadline.getDate() - 3);

            // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞ 3 –¥–Ω—è
            if (threeDaysBefore > new Date()) {
                notifications.push({
                    date: threeDaysBefore,
                    message: this.createThreeDayMessage(name, i, practiceDeadline, endDate, practiceCount)
                });
            }
        }

        // –£–±–∏—Ä–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º –¥–µ–¥–ª–∞–π–Ω–µ, 
        // —Ç–∞–∫ –∫–∞–∫ –æ–Ω–æ —Ç–µ–ø–µ—Ä—å –≤—Å—Ç—Ä–æ–µ–Ω–æ –≤ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–∞–∫—Ç–∏–∫–µ

        return notifications;
    }

    createThreeDayMessage(clientName, practiceNumber, practiceDeadline, finalDeadline, practiceCount) {
        // –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–∞–∫—Ç–∏–∫–∞ - —ç—Ç–æ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –≤–∞–∂–Ω—ã–π –¥–µ–¥–ª–∞–π–Ω
        if (practiceNumber === practiceCount) {
            return `–í–ê–ñ–ù–û–ï –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º –¥–µ–¥–ª–∞–π–Ω–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏

${clientName}, —á–µ—Ä–µ–∑ 3 –¥–Ω—è –Ω–∞—Å—Ç—É–ø–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –¥–µ–¥–ª–∞–π–Ω ${practiceNumber}-–π (–ø–æ—Å–ª–µ–¥–Ω–µ–π) –ø—Ä–∞–∫—Ç–∏–∫–∏ - ${this.formatDate(practiceDeadline)}.

–≠—Ç–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–∞—è –¥–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏. –í –æ—Ç–ª–∏—á–∏–µ –æ—Ç –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤, —ç—Ç–æ—Ç —Å—Ä–æ–∫ –Ω–µ–ª—å–∑—è –Ω–∞—Ä—É—à–∞—Ç—å.

–ü–æ—Å–ª–µ —ç—Ç–æ–π –¥–∞—Ç—ã –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –∑–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –æ–ø–ª–∞—Ç—É +20% –æ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞.

–ö–æ–º–∞–Ω–¥–∞ –∏ –ø—Ä–æ–≤–æ–¥–Ω–∏–∫ –≥–æ—Ç–æ–≤—ã –æ–∫–∞–∑–∞—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É –Ω–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º —ç—Ç–∞–ø–µ! üíé`;
        } 
        // –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –≤—ã–ø—É—Å–∫–Ω–æ–º —á–µ—Ä–µ–∑ –æ–¥–Ω—É –ø—Ä–∞–∫—Ç–∏–∫—É
        else if (practiceNumber % 2 === 0 && practiceNumber < practiceCount) {
            return `–î—Ä—É–∂–µ—Å–∫–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –∏ –ø—Ä–æ–≤–æ–¥–Ω–∏–∫–∞

${clientName}, —á–µ—Ä–µ–∑ 3 –¥–Ω—è —É –Ω–∞—Å –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ä–∏–µ–Ω—Ç–∏—Ä –ø–æ ${practiceNumber}-–π –ø—Ä–∞–∫—Ç–∏–∫–µ - ${this.formatDate(practiceDeadline)}.

–≠—Ç–æ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π —ç—Ç–∞–ø –¥–ª—è —Å–≤–µ—Ä–∫–∏ —Å –ø–ª–∞–Ω–æ–º. –ü—Ä–∞–∫—Ç–∏–∫–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –≥–æ—Ç–æ–≤–∞ —á—É—Ç—å —Ä–∞–Ω—å—à–µ –∏–ª–∏ –Ω–µ–º–Ω–æ–≥–æ –ø–æ–∑–∂–µ - —ç—Ç–æ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ –∏ –Ω–æ—Ä–º–∞–ª—å–Ω–æ.

–ù–∞–ø–æ–º–∏–Ω–∞–µ–º: –≤—ã–ø—É—Å–∫–Ω–æ–π –∏ –∞—Ä—Ö–∏–≤–∞—Ü–∏—è —á–∞—Ç–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ ${this.formatDate(finalDeadline)}. –î–æ —ç—Ç–æ–≥–æ –¥–Ω—è –Ω—É–∂–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å –≤—Å–µ ${practiceCount} –ø—Ä–∞–∫—Ç–∏–∫.

–ö–æ–º–∞–Ω–¥–∞ –∏ –ø—Ä–æ–≤–æ–¥–Ω–∏–∫ –º–æ–≥—É—Ç –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ —ç—Ç–æ—Ç —á–µ–∫–ø–æ–∏–Ω—Ç –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è üå∏`;
        }
        else {
            // –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ - –º—è–≥–∫–∏–µ –æ—Ä–∏–µ–Ω—Ç–∏—Ä—ã
            return `–î—Ä—É–∂–µ—Å–∫–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –∏ –ø—Ä–æ–≤–æ–¥–Ω–∏–∫–∞

${clientName}, —á–µ—Ä–µ–∑ 3 –¥–Ω—è —É –Ω–∞—Å –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ä–∏–µ–Ω—Ç–∏—Ä –ø–æ ${practiceNumber}-–π –ø—Ä–∞–∫—Ç–∏–∫–µ - ${this.formatDate(practiceDeadline)}.

–≠—Ç–æ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π —ç—Ç–∞–ø –¥–ª—è —Å–≤–µ—Ä–∫–∏ —Å –ø–ª–∞–Ω–æ–º. –ü—Ä–∞–∫—Ç–∏–∫–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –≥–æ—Ç–æ–≤–∞ —á—É—Ç—å —Ä–∞–Ω—å—à–µ –∏–ª–∏ –Ω–µ–º–Ω–æ–≥–æ –ø–æ–∑–∂–µ - —ç—Ç–æ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ –∏ –Ω–æ—Ä–º–∞–ª—å–Ω–æ.

–≠—Ç–æ –ø—Ä–æ—Å—Ç–æ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è —Ç–æ—á–∫–∞ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—É—Ç–∏. –ì–ª–∞–≤–Ω–æ–µ - –¥–≤–∏–∂–µ–Ω–∏–µ –∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º—É –¥–µ–¥–ª–∞–π–Ω—É ${practiceNumber === 1 ? '–µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–π' : '–ø–æ—Å–ª–µ–¥–Ω–µ–π'} –ø—Ä–∞–∫—Ç–∏–∫–∏ ${this.formatDate(finalDeadline)}.

–ö–æ–º–∞–Ω–¥–∞ –∏ –ø—Ä–æ–≤–æ–¥–Ω–∏–∫ –º–æ–≥—É—Ç –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ —ç—Ç–æ—Ç —á–µ–∫–ø–æ–∏–Ω—Ç –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è üå±`;
        }
    }

    stopChatNotifications(chatId) {
        this.stopChatTasks(chatId);
        const client = this.clients.get(chatId);
        
        if (client) {
            this.clients.delete(chatId);
            this.saveClientsData();
            this.bot.sendMessage(chatId, `–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è ${client.name} –∑–∞–≤–µ—Ä—à–µ–Ω—ã. –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ —Å–æ–≤–º–µ—Å—Ç–Ω—ã–π –ø—É—Ç—å üí´`);
        } else {
            this.bot.sendMessage(chatId, '–í –¥–∞–Ω–Ω–æ–º —á–∞—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã ‚ú®');
        }
    }

    stopChatTasks(chatId) {
        const tasks = this.scheduledTasks.get(chatId);
        if (tasks) {
            tasks.forEach(task => task.stop());
            this.scheduledTasks.delete(chatId);
        }
    }

    showChatInfo(chatId) {
        const client = this.clients.get(chatId);
        
        if (!client) {
            this.bot.sendMessage(chatId, '–ß–∞—Ç –ø–æ–∫–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /setup –ò–º—è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø—É—Ç–∏ ‚ú®');
            return;
        }

        const now = new Date();
        const daysLeft = Math.ceil((client.endDate - now) / (1000 * 60 * 60 * 24));
        
        const infoMessage = `–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º –ø—É—Ç–∏:

–£—á–∞—Å—Ç–Ω–∏–∫: ${client.name}
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∞–∫—Ç–∏–∫: ${client.practiceCount}
–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: ${this.formatDate(client.startDate)}
–û—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ: ${this.formatDate(client.endDate)}
–í—Ä–µ–º–µ–Ω–∏ –≤ –ø—É—Ç–∏: ${daysLeft > 0 ? daysLeft + ' –¥–Ω–µ–π' : '–ü—É—Ç—å –∑–∞–≤–µ—Ä—à—ë–Ω'}

–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã –∏ —Ä–∞–±–æ—Ç–∞—é—Ç —Å –∑–∞–±–æ—Ç–æ–π –æ –≤–∞—Å ‚ú®`;

        this.bot.sendMessage(chatId, infoMessage);
    }

    saveClientsData() {
        const data = {};
        this.clients.forEach((client, chatId) => {
            data[chatId] = {
                ...client,
                startDate: client.startDate.toISOString(),
                endDate: client.endDate.toISOString()
            };
        });
        
        try {
            fs.writeFileSync(this.dataFile, JSON.stringify(data, null, 2));
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
        }
    }

    loadClientsData() {
        try {
            if (fs.existsSync(this.dataFile)) {
                const data = JSON.parse(fs.readFileSync(this.dataFile, 'utf8'));
                Object.entries(data).forEach(([chatId, clientData]) => {
                    const client = {
                        ...clientData,
                        startDate: new Date(clientData.startDate),
                        endDate: new Date(clientData.endDate),
                        chatId: parseInt(chatId)
                    };
                    this.clients.set(parseInt(chatId), client);
                });
                console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${this.clients.size} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤`);
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', error);
        }
    }

    restoreScheduledTasks() {
        this.clients.forEach(client => {
            this.scheduleNotifications(client);
        });
        console.log(`‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è ${this.clients.size} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤`);
    }

    formatDate(date) {
        return date.toLocaleDateString('ru-RU', {
            day: '2-digit',
            month: '2-digit',
            year: 'numeric'
        });
    }

    dateToCron(date) {
        const minutes = date.getMinutes();
        const hours = date.getHours();
        const day = date.getDate();
        const month = date.getMonth() + 1;
        
        return `${minutes} ${hours} ${day} ${month} *`;
    }
}

// –í–ê–ñ–ù–û: –î–ª—è –æ–±–ª–∞–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è, –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ - –ø—Ä—è–º–æ–π —Ç–æ–∫–µ–Ω
const BOT_TOKEN = process.env.BOT_TOKEN || '8024864374:AAFMYhdKrfulQCAO6ZvEoRf8peU2CgifPwc';

try {
    const notificationBot = new MultiChatNotificationBot(BOT_TOKEN);
    console.log('üåü –ë–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –∑–∞–ø—É—â–µ–Ω —Å —Ç–µ–ø–ª–æ—Ç–æ–π –∏ –∑–∞–±–æ—Ç–æ–π!');
} catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:', error.message);
    console.log('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞');
}

module.exports = MultiChatNotificationBot;
